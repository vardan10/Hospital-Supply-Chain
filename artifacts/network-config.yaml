---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "balance-transfer"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "Balance Transfer Network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section will be added on a per org basis see org1.yaml and org2.yaml
#
#client:

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer

    # Required. list of peers from participating orgs
    peers:
      org1-peer1:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      org2-peer1:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      org3-peer5025:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
      - mycc:v1

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: org1

    peers:
      - org1-peer1

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-org1

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    signedCert:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  Org2:
    mspid: Org2MSP
    peers:
      - org2-peer1
    certificateAuthorities:
      - ca-org2
    signedCert:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem

  Org3:
    mspid: Org3MSP
    peers:
      - org3-peer5025
    certificateAuthorities:
      - ca-org3
    signedCert:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp/signcerts/Admin@org3.example.com-cert.pem


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer:
    url: grpcs://n8b3441377b3547849d5cd7ccea3eb298-orderer.uk02.blockchain.ibm.com:31001

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: null

    tlsCACerts:
      path: artifacts/bluemix/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  org1-peer1:
    # this URL is used to send endorsement and query requests
    url: grpcs://n8b3441377b3547849d5cd7ccea3eb298-org1-peer1.uk02.blockchain.ibm.com:31002

    grpcOptions:
      ssl-target-name-override: null
    tlsCACerts:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt

  org2-peer1:
    url: grpcs://n8b3441377b3547849d5cd7ccea3eb298-org2-peer1.uk02.blockchain.ibm.com:31002
    grpcOptions:
      ssl-target-name-override: null
    tlsCACerts:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt

  org3-peer5025:
    url: grpcs://n8b3441377b3547849d5cd7ccea3eb298-org3-peer5025.uk02.blockchain.ibm.com:31002
    grpcOptions:
      ssl-target-name-override: null
    tlsCACerts:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt


#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: https://admin:ca14fd09d7@n8b3441377b3547849d5cd7ccea3eb298-org1-ca.uk02.blockchain.ibm.com:31011
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: true
    tlsCACerts:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: ca14fd09d7
    # [Optional] The optional name of the CA.
    caName: org1CA

  ca-org2:
    url: https://admin:34d65f7ba0@n8b3441377b3547849d5cd7ccea3eb298-org2-ca.uk02.blockchain.ibm.com:31011
    httpOptions:
      verify: false
    tlsCACerts:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem
    registrar:
      - enrollId: admin
        enrollSecret: 34d65f7ba0
    # [Optional] The optional name of the CA.
    caName: org2CA

  ca-org3:
    url: https://admin:d048aa92c2@n8b3441377b3547849d5cd7ccea3eb298-org3-ca.uk02.blockchain.ibm.com:31011
    httpOptions:
      verify: true
    tlsCACerts:
      path: artifacts/bluemix/crypto-config/peerOrganizations/org3.example.com/ca/ca.org3.example.com-cert.pem
    registrar:
      - enrollId: admin
        enrollSecret: d048aa92c2
    # [Optional] The optional name of the CA.
    caName: org3CA